{
	"info": {
		"_postman_id": "287f446e-4c78-431a-84f0-b5728f1e84af",
		"name": "OpenAPI collection MIF13",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "19632363"
	},
	"item": [
		{
			"name": "Input = form data / output = HTML",
			"item": [
				{
					"name": "users - www-form-urlencoded",
					"item": [
						{
							"name": "Create user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.collectionVariables.set(\"login\", \"NewUser\");\r",
											"pm.collectionVariables.set(\"password\", \"passwordNewUser\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {}
							},
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "login",
											"value": "{{login}}",
											"type": "default"
										},
										{
											"key": "password",
											"value": "{{password}}",
											"type": "default"
										},
										{
											"key": "species",
											"value": "{{species}}",
											"type": "text"
										},
										{
											"key": "images",
											"value": "{{image}}",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{baseUrl}}/users",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create user already exist",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 409\", function () {\r",
											"    pm.response.to.have.status(409);\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.collectionVariables.set(\"userId\", \"toto\");\r",
											"pm.collectionVariables.set(\"userPassword\", \"passwordToto\");\r",
											"pm.collectionVariables.set(\"userName\", \"Toto\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {}
							},
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "login",
											"value": "{{login}}",
											"type": "default"
										},
										{
											"key": "password",
											"value": "{{password}}",
											"type": "default"
										},
										{
											"key": "species",
											"value": "{{species}}",
											"type": "text"
										},
										{
											"key": "images",
											"value": "{{image}}",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{baseUrl}}/users",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type header is present\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"\r",
											"pm.test(\"Body contains user's name\", function () {\r",
											"    pm.expect(pm.response.text()).to.contain(pm.collectionVariables.get(\"login\"));\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {}
							},
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/users/{{login}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										"{{login}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get user CORS",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type header is present\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"\r",
											"pm.test(\"Origin header is present\", function () {\r",
											"    pm.request.to.have.header(\"Origin\");\r",
											"});\r",
											"\r",
											"pm.test(\"Body contains user's name\", function () {\r",
											"    pm.expect(pm.response.text()).to.contain(pm.collectionVariables.get(\"login\"));\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {}
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Origin",
										"value": "{{originURL}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/users/{{login}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										"{{login}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get user CORS invalid",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 403\", function () {\r",
											"    pm.response.to.have.status(403);\r",
											"});\r",
											"\r",
											"pm.test(\"Origin header is present\", function () {\r",
											"    pm.request.to.have.header(\"Origin\");\r",
											"});\r",
											"\r",
											"pm.test(\"Invalid Cors request\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Invalid CORS request\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {}
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Origin",
										"value": "http://wrongURL",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/users/{{login}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										"{{login}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get users",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"login\"));\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {}
							},
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/users",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users"
									]
								}
							},
							"response": []
						},
						{
							"name": "Login",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 204\", function () {\r",
											"    pm.response.to.have.status(204);\r",
											"});\r",
											"\r",
											"pm.test(\"Authorization header is present\", function () {\r",
											"    pm.response.to.have.header(\"Authorization\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type request header is present\", function () {\r",
											"    pm.request.to.have.header(\"Content-Type\");\r",
											"});\r",
											"\r",
											"var token = pm.response.headers.get(\"Authorization\");\r",
											"if(token != null && token.startsWith(\"Bearer \")) {\r",
											"    token = token.substring(7);\r",
											"}\r",
											"\r",
											"pm.collectionVariables.set(\"token\", token);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "Origin",
										"value": "{{originURL}}",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/x-www-form-urlencoded",
										"type": "text"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "login",
											"value": "{{login}}",
											"type": "default"
										},
										{
											"key": "password",
											"value": "{{password}}",
											"type": "default"
										}
									]
								},
								"url": {
									"raw": "{{baseUrl}}/login",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"login"
									]
								}
							},
							"response": []
						},
						{
							"name": "Login invalid",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 404\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type request header is present\", function () {\r",
											"    pm.request.to.have.header(\"Content-Type\");\r",
											"\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type response header is present\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "Origin",
										"value": "{{originURL}}",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/x-www-form-urlencoded",
										"type": "text"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "login",
											"value": "",
											"type": "default"
										},
										{
											"key": "password",
											"value": "",
											"type": "default"
										}
									]
								},
								"url": {
									"raw": "{{baseUrl}}/login",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"login"
									]
								}
							},
							"response": [
								{
									"name": "Login invalid login",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Origin",
												"value": "{{baseUrl}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "login",
													"value": "unknow",
													"type": "default"
												},
												{
													"key": "password",
													"value": "{{password}}",
													"type": "default"
												}
											]
										},
										"url": {
											"raw": "{{baseUrl}}/login",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"login"
											]
										}
									},
									"_postman_previewlanguage": "Text",
									"header": [],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Login invalid password",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Origin",
												"value": "{{baseUrl}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "login",
													"value": "{{login}}",
													"type": "default"
												},
												{
													"key": "password",
													"value": "unknow",
													"type": "default"
												}
											]
										},
										"url": {
											"raw": "{{baseUrl}}/login",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"login"
											]
										}
									},
									"_postman_previewlanguage": "Text",
									"header": [],
									"cookie": [],
									"body": ""
								}
							]
						},
						{
							"name": "Login CORS required",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Origin header is not present\", function () {\r",
											"    pm.request.to.not.have.header(\"Origin\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type header is present\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\");\r",
											"    pm.request.to.have.header(\"Content-Type\");\r",
											"});\r",
											"\r",
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"warning": "This is a duplicate header and will be overridden by the Content-Type header generated by Postman.",
										"key": "Content-Type",
										"value": "application/x-www-form-urlencoded",
										"type": "text"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "login",
											"value": "{{login}}",
											"type": "default"
										},
										{
											"key": "password",
											"value": "{{password}}",
											"type": "default"
										}
									]
								},
								"url": {
									"raw": "{{baseUrl}}/login",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"login"
									]
								}
							},
							"response": []
						},
						{
							"name": "Login CORS invalid",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 403\", function () {\r",
											"    pm.response.to.have.status(403);\r",
											"});\r",
											"\r",
											"pm.test(\"Origin header is present\", function () {\r",
											"    pm.request.to.have.header(\"Origin\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type header is present\", function () {\r",
											"    pm.request.to.have.header(\"Content-Type\");\r",
											"});\r",
											"\r",
											"pm.test(\"Invalid Cors request\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Invalid CORS request\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/x-www-form-urlencoded",
										"type": "text"
									},
									{
										"key": "Origin",
										"value": "http://wrongOrigin",
										"type": "text"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "login",
											"value": "{{login}}",
											"type": "default"
										},
										{
											"key": "password",
											"value": "{{password}}",
											"type": "default"
										}
									]
								},
								"url": {
									"raw": "{{baseUrl}}/login",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"login"
									]
								}
							},
							"response": []
						},
						{
							"name": "Authenticate",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 204\", function () {",
											"    pm.response.to.have.status(204);",
											"});",
											"",
											"pm.test(\"Content-Type header is present\", function () {",
											"    pm.request.to.have.header(\"Content-Type\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept": true
								}
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/x-www-form-urlencoded",
										"type": "text"
									},
									{
										"key": "Origin",
										"value": "{{springUrl}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/authenticate?jwt={{token}}&Origin={{originURL}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"authenticate"
									],
									"query": [
										{
											"key": "jwt",
											"value": "{{token}}"
										},
										{
											"key": "Origin",
											"value": "{{originURL}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Authenticate Origin Param required",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"Content-Type header is present\", function () {",
											"    pm.request.to.have.header(\"Content-Type\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept": true
								}
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/x-www-form-urlencoded",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/authenticate?jwt={{token}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"authenticate"
									],
									"query": [
										{
											"key": "jwt",
											"value": "{{token}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Authenticate JWT Param required",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"Content-Type header is present\", function () {",
											"    pm.request.to.have.header(\"Content-Type\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept": true
								}
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/x-www-form-urlencoded",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/authenticate?Origin={{originURL}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"authenticate"
									],
									"query": [
										{
											"key": "Origin",
											"value": "{{originURL}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get user after login",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type header is present\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"\r",
											"pm.test(\"Body contains user's name\", function () {\r",
											"    pm.expect(pm.response.text()).to.contain(pm.collectionVariables.get(\"login\"));\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {}
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/x-www-form-urlencoded",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/users/{{login}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										"{{login}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Logout",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 204\", function () {\r",
											"    pm.response.to.have.status(204);\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type header is present\", function () {\r",
											"    pm.request.to.have.header(\"Content-Type\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Origin",
										"value": "{{originURL}}",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/x-www-form-urlencoded",
										"type": "text"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "login",
											"value": "{{login}}",
											"type": "default"
										}
									]
								},
								"url": {
									"raw": "{{baseUrl}}/logout",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"logout"
									]
								}
							},
							"response": []
						},
						{
							"name": "Logout invalid",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 404\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type header is present\", function () {\r",
											"    pm.request.to.have.header(\"Content-Type\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Origin",
										"value": "{{originURL}}",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/x-www-form-urlencoded",
										"type": "text"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "login",
											"value": "unknow",
											"type": "default"
										}
									]
								},
								"url": {
									"raw": "{{baseUrl}}/logout",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"logout"
									]
								}
							},
							"response": []
						},
						{
							"name": "Logout CORS required",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Origin header is not present\", function () {\r",
											"    pm.request.to.not.have.header(\"Origin\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type header is present\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\");\r",
											"    pm.request.to.have.header(\"Content-Type\");\r",
											"});\r",
											"\r",
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/x-www-form-urlencoded",
										"type": "text"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "login",
											"value": "{{login}}",
											"type": "default"
										}
									]
								},
								"url": {
									"raw": "{{baseUrl}}/logout",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"logout"
									]
								}
							},
							"response": []
						},
						{
							"name": "Logout CORS invalid",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 403\", function () {\r",
											"    pm.response.to.have.status(403);\r",
											"});\r",
											"\r",
											"pm.test(\"Origin header is present\", function () {\r",
											"    pm.request.to.have.header(\"Origin\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type header is present\", function () {\r",
											"    pm.request.to.have.header(\"Content-Type\");\r",
											"});\r",
											"\r",
											"pm.test(\"Invalid Cors request\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Invalid CORS request\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Origin",
										"value": "http://wrong:8080",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/x-www-form-urlencoded",
										"type": "text"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "login",
											"value": "{{login}}",
											"type": "default"
										}
									]
								},
								"url": {
									"raw": "{{baseUrl}}/logout",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"logout"
									]
								}
							},
							"response": []
						},
						{
							"name": "GET user after logout",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type request header is present\", function () {\r",
											"    pm.request.to.have.header(\"Content-Type\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type header is present\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {}
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/x-www-form-urlencoded",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/users/{{login}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										"{{login}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update user password",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 204\", function () {\r",
											"    pm.response.to.have.status(204);\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.collectionVariables.set(\"userName\", \"Tototo\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "password",
											"value": "PUTPASSWORDHTML",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{baseUrl}}/users/{{login}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										"{{login}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Login after update password",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 204\", function () {\r",
											"    pm.response.to.have.status(204);\r",
											"});\r",
											"\r",
											"pm.test(\"Authorization header is present\", function () {\r",
											"    pm.response.to.have.header(\"Authorization\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type request header is present\", function () {\r",
											"    pm.request.to.have.header(\"Content-Type\");\r",
											"});\r",
											"\r",
											"var token = pm.response.headers.get(\"Authorization\");\r",
											"if(token != null && token.startsWith(\"Bearer \")) {\r",
											"    token = token.substring(7);\r",
											"}\r",
											"\r",
											"pm.collectionVariables.set(\"token\", token);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "Origin",
										"value": "{{originURL}}",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/x-www-form-urlencoded",
										"type": "text"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "login",
											"value": "{{login}}",
											"type": "default"
										},
										{
											"key": "password",
											"value": "PUTPASSWORDHTML",
											"type": "default"
										}
									]
								},
								"url": {
									"raw": "{{baseUrl}}/login",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"login"
									]
								}
							},
							"response": []
						},
						{
							"name": "GET all users before delete",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type header is present\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"login\"));\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {}
							},
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "text/html",
										"type": "default",
										"disabled": true
									}
								],
								"url": {
									"raw": "{{baseUrl}}/users",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 204\", function () {\r",
											"    pm.response.to.have.status(204);\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type header is present\", function () {\r",
											"    pm.request.to.have.header(\"Content-Type\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/x-www-form-urlencoded",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/users/{{login}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										"{{login}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete user not found",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 404\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type header is present\", function () {\r",
											"    pm.request.to.have.header(\"Content-Type\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/x-www-form-urlencoded",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/users/notFound",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										"notFound"
									]
								}
							},
							"response": []
						},
						{
							"name": "GET all users after delete",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type header is present\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"\r",
											"pm.test(\"Body matches string, user deleted.\", function () {\r",
											"    pm.expect(pm.response.text()).to.not.include(pm.collectionVariables.get(\"login\"));\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {}
							},
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/users",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "Input = JSON / output = JSON",
			"item": [
				{
					"name": "Users - JSON",
					"item": [
						{
							"name": "Create user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.collectionVariables.set(\"login\", \"NewUser\");\r",
											"pm.collectionVariables.set(\"password\", \"passwordNewUser\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {}
							},
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"login\": \"{{login}}\",\n  \"password\": \"{{password}}\",\n  \"species\": \"{{species}}\",\n  \"image\": \"{{image}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/users",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create user already exist",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 409\", function () {\r",
											"    pm.response.to.have.status(409);\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.collectionVariables.set(\"userId\", \"toto\");\r",
											"pm.collectionVariables.set(\"userPassword\", \"passwordToto\");\r",
											"pm.collectionVariables.set(\"userName\", \"Toto\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {}
							},
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"login\": \"{{login}}\",\n  \"password\": \"{{password}}\",\n  \"species\": \"{{species}}\",\n  \"image\": \"{{image}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/users",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type header is present\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"\r",
											"pm.test(\"Body contains user's name\", function () {\r",
											"    pm.expect(pm.response.text()).to.contain(pm.collectionVariables.get(\"login\"));\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {}
							},
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/users/{{login}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										"{{login}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get user CORS",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type header is present\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"\r",
											"pm.test(\"Origin header is present\", function () {\r",
											"    pm.request.to.have.header(\"Origin\");\r",
											"});\r",
											"\r",
											"pm.test(\"Body contains user's name\", function () {\r",
											"    pm.expect(pm.response.text()).to.contain(pm.collectionVariables.get(\"login\"));\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {}
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Origin",
										"value": "{{originURL}}",
										"type": "text"
									},
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/users/{{login}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										"{{login}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get user CORS invalid",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 403\", function () {\r",
											"    pm.response.to.have.status(403);\r",
											"});\r",
											"\r",
											"pm.test(\"Origin header is present\", function () {\r",
											"    pm.request.to.have.header(\"Origin\");\r",
											"});\r",
											"\r",
											"pm.test(\"Invalid Cors request\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Invalid CORS request\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {}
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Origin",
										"value": "http://wrongURL",
										"type": "text"
									},
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/users/{{login}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										"{{login}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get users",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"login\"));\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {}
							},
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/users",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users"
									]
								}
							},
							"response": []
						},
						{
							"name": "Login",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 204\", function () {\r",
											"    pm.response.to.have.status(204);\r",
											"});\r",
											"\r",
											"pm.test(\"Authorization header is present\", function () {\r",
											"    pm.response.to.have.header(\"Authorization\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type request header is present\", function () {\r",
											"    pm.request.to.have.header(\"Content-Type\");\r",
											"});\r",
											"\r",
											"var token = pm.response.headers.get(\"Authorization\");\r",
											"if(token != null && token.startsWith(\"Bearer \")) {\r",
											"    token = token.substring(7);\r",
											"}\r",
											"\r",
											"pm.collectionVariables.set(\"token\", token);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "Origin",
										"value": "{{originURL}}",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"login\": \"{{login}}\",\n  \"password\": \"{{password}}\"\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/login",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"login"
									]
								}
							},
							"response": []
						},
						{
							"name": "Login invalid",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 404\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type request header is present\", function () {\r",
											"    pm.request.to.have.header(\"Content-Type\");\r",
											"\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type response header is present\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "Origin",
										"value": "{{originURL}}",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"login\": \"\",\n  \"password\": \"\"\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/login",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"login"
									]
								}
							},
							"response": [
								{
									"name": "Login invalid login",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Origin",
												"value": "{{baseUrl}}",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"login\": \"\",\n  \"password\": \"{{password}}\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/login",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"login"
											]
										}
									},
									"_postman_previewlanguage": "Text",
									"header": [],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Login invalid password",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Origin",
												"value": "{{baseUrl}}",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"login\": \"{{login}}\",\n  \"password\": \"\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/login",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"login"
											]
										}
									},
									"_postman_previewlanguage": "Text",
									"header": [],
									"cookie": [],
									"body": ""
								}
							]
						},
						{
							"name": "Login CORS required",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Origin header is not present\", function () {\r",
											"    pm.request.to.not.have.header(\"Origin\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type header is present\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\");\r",
											"    pm.request.to.have.header(\"Content-Type\");\r",
											"});\r",
											"\r",
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"login\": \"{{login}}\",\n  \"password\": \"{{password}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/login",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"login"
									]
								}
							},
							"response": []
						},
						{
							"name": "Login CORS invalid",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 403\", function () {\r",
											"    pm.response.to.have.status(403);\r",
											"});\r",
											"\r",
											"pm.test(\"Origin header is present\", function () {\r",
											"    pm.request.to.have.header(\"Origin\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type header is present\", function () {\r",
											"    pm.request.to.have.header(\"Content-Type\");\r",
											"});\r",
											"\r",
											"pm.test(\"Invalid Cors request\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Invalid CORS request\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Origin",
										"value": "http://wrongOrigin",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"login\": \"{{login}}\",\n  \"password\": \"{{password}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/login",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"login"
									]
								}
							},
							"response": []
						},
						{
							"name": "Authenticate",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 204\", function () {",
											"    pm.response.to.have.status(204);",
											"});",
											"",
											"pm.test(\"Content-Type header is present\", function () {",
											"    pm.request.to.have.header(\"Content-Type\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept": true
								}
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Origin",
										"value": "{{springUrl}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/authenticate?jwt={{token}}&Origin={{originURL}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"authenticate"
									],
									"query": [
										{
											"key": "jwt",
											"value": "{{token}}"
										},
										{
											"key": "Origin",
											"value": "{{originURL}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Authenticate Origin Param required",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"Content-Type header is present\", function () {",
											"    pm.request.to.have.header(\"Content-Type\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept": true
								}
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/authenticate?jwt={{token}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"authenticate"
									],
									"query": [
										{
											"key": "jwt",
											"value": "{{token}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Authenticate JWT Param required",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"Content-Type header is present\", function () {",
											"    pm.request.to.have.header(\"Content-Type\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept": true
								}
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/authenticate?Origin={{originURL}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"authenticate"
									],
									"query": [
										{
											"key": "Origin",
											"value": "{{originURL}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get user after login",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type header is present\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"\r",
											"pm.test(\"Body contains user's name\", function () {\r",
											"    pm.expect(pm.response.text()).to.contain(pm.collectionVariables.get(\"login\"));\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {}
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/users/{{login}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										"{{login}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Logout",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 204\", function () {\r",
											"    pm.response.to.have.status(204);\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type header is present\", function () {\r",
											"    pm.request.to.have.header(\"Content-Type\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Origin",
										"value": "{{originURL}}",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"login\": \"{{login}}\"\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/logout",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"logout"
									]
								}
							},
							"response": []
						},
						{
							"name": "Logout invalid",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 404\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type header is present\", function () {\r",
											"    pm.request.to.have.header(\"Content-Type\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Origin",
										"value": "{{originURL}}",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"login\": \"unknow\"\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/logout",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"logout"
									]
								}
							},
							"response": []
						},
						{
							"name": "Logout CORS required",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Origin header is not present\", function () {\r",
											"    pm.request.to.not.have.header(\"Origin\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type header is present\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\");\r",
											"    pm.request.to.have.header(\"Content-Type\");\r",
											"});\r",
											"\r",
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"login\": \"{{login}}\"\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/logout",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"logout"
									]
								}
							},
							"response": []
						},
						{
							"name": "Logout CORS invalid",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 403\", function () {\r",
											"    pm.response.to.have.status(403);\r",
											"});\r",
											"\r",
											"pm.test(\"Origin header is present\", function () {\r",
											"    pm.request.to.have.header(\"Origin\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type header is present\", function () {\r",
											"    pm.request.to.have.header(\"Content-Type\");\r",
											"});\r",
											"\r",
											"pm.test(\"Invalid Cors request\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Invalid CORS request\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Origin",
										"value": "http://wrong:8080",
										"type": "text"
									},
									{
										"warning": "This is a duplicate header and will be overridden by the Content-Type header generated by Postman.",
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"login\": \"{{login}}\"\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/logout",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"logout"
									]
								}
							},
							"response": []
						},
						{
							"name": "GET user after logout",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type request header is present\", function () {\r",
											"    pm.request.to.have.header(\"Content-Type\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type header is present\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {}
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/users/{{login}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										"{{login}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update user password",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 204\", function () {\r",
											"    pm.response.to.have.status(204);\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"password\": \"updatePassword\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/users/{{login}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										"{{login}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Login after update password",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 204\", function () {\r",
											"    pm.response.to.have.status(204);\r",
											"});\r",
											"\r",
											"pm.test(\"Authorization header is present\", function () {\r",
											"    pm.response.to.have.header(\"Authorization\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type request header is present\", function () {\r",
											"    pm.request.to.have.header(\"Content-Type\");\r",
											"});\r",
											"\r",
											"var token = pm.response.headers.get(\"Authorization\");\r",
											"if(token != null && token.startsWith(\"Bearer \")) {\r",
											"    token = token.substring(7);\r",
											"}\r",
											"\r",
											"pm.collectionVariables.set(\"token\", token);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "Origin",
										"value": "{{originURL}}",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"login\": \"{{login}}\",\n  \"password\": \"updatePassword\"\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/login",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"login"
									]
								}
							},
							"response": []
						},
						{
							"name": "GET all users before delete",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type header is present\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"login\"));\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {}
							},
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/users",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 204\", function () {\r",
											"    pm.response.to.have.status(204);\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type header is present\", function () {\r",
											"    pm.request.to.have.header(\"Content-Type\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/users/{{login}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										"{{login}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete user not found Copy",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 404\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type header is present\", function () {\r",
											"    pm.request.to.have.header(\"Content-Type\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/users/notFound",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										"notFound"
									]
								}
							},
							"response": []
						},
						{
							"name": "GET all users after delete Copy",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type header is present\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"\r",
											"pm.test(\"Body matches string, user deleted.\", function () {\r",
											"    pm.expect(pm.response.text()).to.not.include(pm.collectionVariables.get(\"login\"));\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {}
							},
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/users",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "Input = XML / output = XML Copy",
			"item": [
				{
					"name": "Users - XML",
					"item": [
						{
							"name": "Create user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.collectionVariables.set(\"login\", \"tata\");\r",
											"pm.collectionVariables.set(\"password\", \"passwordTata\");\r",
											"pm.collectionVariables.set(\"userName\", \"Tata\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {}
							},
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<user>\r\n    <login>{{login}}</login>\r\n    <password>{{password}}</password>\r\n    <species>{{species}}</species>\r\n    <image>{{image}}</image>\r\n</user>",
									"options": {
										"raw": {
											"language": "xml"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/users",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create user already exist",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 409\", function () {\r",
											"    pm.response.to.have.status(409);\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.collectionVariables.set(\"userId\", \"tata\");\r",
											"pm.collectionVariables.set(\"userPassword\", \"passwordTata\");\r",
											"pm.collectionVariables.set(\"userName\", \"Tata\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<user>\r\n    <login>{{login}}</login>\r\n    <password>{{password}}</password>\r\n    <species>{{species}}</species>\r\n    <image>{{image}}</image>\r\n</user>",
									"options": {
										"raw": {
											"language": "xml"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/users",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users"
									]
								}
							},
							"response": []
						},
						{
							"name": "GET user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type header is present\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"\r",
											"pm.test(\"Body contains user's name\", function () {\r",
											"    pm.expect(pm.response.text()).to.contain(pm.collectionVariables.get(\"login\"));\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept": true
								}
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/xml",
										"type": "default"
									},
									{
										"key": "Origin",
										"value": "{{originURL}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/users/{{login}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										"{{login}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "GET user CORS",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type header is present\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"\r",
											"pm.test(\"Origin header is present\", function () {\r",
											"    pm.request.to.have.header(\"Origin\");\r",
											"});\r",
											"\r",
											"pm.test(\"Body contains user's name\", function () {\r",
											"    pm.expect(pm.response.text()).to.contain(pm.collectionVariables.get(\"login\"));\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept": true
								}
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/xml",
										"type": "default"
									},
									{
										"key": "Origin",
										"value": "{{originURL}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/users/{{login}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										"{{login}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "GET user CORS invalid",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 403\", function () {\r",
											"    pm.response.to.have.status(403);\r",
											"});\r",
											"\r",
											"pm.test(\"Origin header is present\", function () {\r",
											"    pm.request.to.have.header(\"Origin\");\r",
											"});\r",
											"\r",
											"pm.test(\"Invalid Cors request\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Invalid CORS request\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept": true
								}
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/xml",
										"type": "default"
									},
									{
										"key": "Origin",
										"value": "http://wrongURL",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/users/{{login}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										"{{login}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "GET users",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"login\"));\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept": true
								}
							},
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/xml",
										"type": "default"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/users",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users"
									]
								}
							},
							"response": []
						},
						{
							"name": "Login",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 204\", function () {\r",
											"    pm.response.to.have.status(204);\r",
											"});\r",
											"\r",
											"pm.test(\"Authorization header is present\", function () {\r",
											"    pm.response.to.have.header(\"Authorization\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type request header is present\", function () {\r",
											"    pm.request.to.have.header(\"Content-Type\");\r",
											"});\r",
											"\r",
											"var token = pm.response.headers.get(\"Authorization\");\r",
											"if(token != null && token.startsWith(\"Bearer \")) {\r",
											"    token = token.substring(7);\r",
											"}\r",
											"\r",
											"pm.collectionVariables.set(\"token\", token);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "Origin",
										"value": "{{originURL}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<user>\r\n    <login>{{login}}</login>\r\n    <password>{{password}}</password>\r\n</user>",
									"options": {
										"raw": {
											"language": "xml"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/login",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"login"
									]
								}
							},
							"response": []
						},
						{
							"name": "Login invalid",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 404\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type request header is present\", function () {\r",
											"    pm.request.to.have.header(\"Content-Type\");\r",
											"\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type response header is present\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "Origin",
										"value": "{{originURL}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "<login></login>\n<password></password>",
									"options": {
										"raw": {
											"language": "xml"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/login",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"login"
									]
								}
							},
							"response": [
								{
									"name": "Login invalid login",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Origin",
												"value": "http://localhost:8080",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<user>\r\n    <login></login>\r\n    <password>{{password}}</password>\r\n</user>",
											"options": {
												"raw": {
													"language": "xml"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/login",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"login"
											]
										}
									},
									"_postman_previewlanguage": null,
									"header": null,
									"cookie": [],
									"body": null
								},
								{
									"name": "Login invalid password",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Origin",
												"value": "http://localhost:8080",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<user>\r\n    <login>{{login}}</login>\r\n    <password></password>\r\n</user>",
											"options": {
												"raw": {
													"language": "xml"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/login",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"login"
											]
										}
									},
									"_postman_previewlanguage": null,
									"header": null,
									"cookie": [],
									"body": null
								}
							]
						},
						{
							"name": "Login CORS required",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Origin header is not present\", function () {\r",
											"    pm.request.to.not.have.header(\"Origin\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type header is present\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\");\r",
											"    pm.request.to.have.header(\"Content-Type\");\r",
											"});\r",
											"\r",
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<user>\r\n    <login>{{login}}</login>\r\n    <password>{{password}}</password>\r\n</user>",
									"options": {
										"raw": {
											"language": "xml"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/login",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"login"
									]
								}
							},
							"response": []
						},
						{
							"name": "Login CORS invalid",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 403\", function () {\r",
											"    pm.response.to.have.status(403);\r",
											"});\r",
											"\r",
											"pm.test(\"Origin header is present\", function () {\r",
											"    pm.request.to.have.header(\"Origin\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type header is present\", function () {\r",
											"    pm.request.to.have.header(\"Content-Type\");\r",
											"});\r",
											"\r",
											"pm.test(\"Invalid Cors request\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Invalid CORS request\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "Origin",
										"value": "http://wrongOrigin.com",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<user>\r\n    <login>{{login}}</login>\r\n    <password>{{password}}</password>\r\n</user>",
									"options": {
										"raw": {
											"language": "xml"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/login",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"login"
									]
								}
							},
							"response": []
						},
						{
							"name": "Authenticate",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 204\", function () {",
											"    pm.response.to.have.status(204);",
											"});",
											"",
											"pm.test(\"Content-Type header is present\", function () {",
											"    pm.request.to.have.header(\"Content-Type\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/authenticate?jwt={{token}}&Origin={{originURL}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"authenticate"
									],
									"query": [
										{
											"key": "jwt",
											"value": "{{token}}"
										},
										{
											"key": "Origin",
											"value": "{{originURL}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Authenticate Origin Param required",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"Content-Type header is present\", function () {",
											"    pm.request.to.have.header(\"Content-Type\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/authenticate?jwt={{token}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"authenticate"
									],
									"query": [
										{
											"key": "jwt",
											"value": "{{token}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Authenticate JWT Param required",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"Content-Type header is present\", function () {",
											"    pm.request.to.have.header(\"Content-Type\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/authenticate?Origin={{originURL}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"authenticate"
									],
									"query": [
										{
											"key": "Origin",
											"value": "{{originURL}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "GET user after login",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type header is present\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"\r",
											"pm.test(\"Body contains user's name\", function () {\r",
											"    pm.expect(pm.response.text()).to.contain(pm.collectionVariables.get(\"login\"));\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept": true
								}
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/xml",
										"type": "default"
									},
									{
										"key": "Origin",
										"value": "{{originURL}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/users/{{login}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										"{{login}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Logout",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 204\", function () {\r",
											"    pm.response.to.have.status(204);\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type header is present\", function () {\r",
											"    pm.request.to.have.header(\"Content-Type\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Origin",
										"value": "{{originURL}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<user>\r\n    <login>{{login}}</login>\r\n</user>",
									"options": {
										"raw": {
											"language": "xml"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/logout",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"logout"
									]
								}
							},
							"response": []
						},
						{
							"name": "Logout invalid",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 404\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type header is present\", function () {\r",
											"    pm.request.to.have.header(\"Content-Type\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Origin",
										"value": "{{originURL}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<user>\r\n    <login>unknow</login>\r\n</user>",
									"options": {
										"raw": {
											"language": "xml"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/logout",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"logout"
									]
								}
							},
							"response": []
						},
						{
							"name": "Logout CORS required",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Origin header is not present\", function () {\r",
											"    pm.request.to.not.have.header(\"Origin\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type header is present\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\");\r",
											"    pm.request.to.have.header(\"Content-Type\");\r",
											"});\r",
											"\r",
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<user>\r\n    <login>{{login}}</login>\r\n</user>",
									"options": {
										"raw": {
											"language": "xml"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/logout",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"logout"
									]
								}
							},
							"response": []
						},
						{
							"name": "Logout CORS invalid",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 403\", function () {\r",
											"    pm.response.to.have.status(403);\r",
											"});\r",
											"\r",
											"pm.test(\"Origin header is present\", function () {\r",
											"    pm.request.to.have.header(\"Origin\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type header is present\", function () {\r",
											"    pm.request.to.have.header(\"Content-Type\");\r",
											"});\r",
											"\r",
											"pm.test(\"Invalid Cors request\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Invalid CORS request\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Origin",
										"value": "invalidOrigin",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<user>\r\n    <login>{{login}}</login>\r\n</user>",
									"options": {
										"raw": {
											"language": "xml"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/logout",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"logout"
									]
								}
							},
							"response": []
						},
						{
							"name": "GET user after logout",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type request header is present\", function () {\r",
											"    pm.request.to.have.header(\"Content-Type\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type header is present\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept": true
								}
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/xml",
										"type": "default"
									},
									{
										"key": "Content-Type",
										"value": "application/xml",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/users/{{login}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										"{{login}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update user password",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 204\", function () {\r",
											"    pm.response.to.have.status(204);\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.collectionVariables.set(\"userName\", \"Tototo\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<user>\r\n    <password>updatePassword</password>\r\n</user>",
									"options": {
										"raw": {
											"language": "xml"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/users/{{login}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										"{{login}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Login after update user password",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 204\", function () {\r",
											"    pm.response.to.have.status(204);\r",
											"});\r",
											"\r",
											"pm.test(\"Authorization header is present\", function () {\r",
											"    pm.response.to.have.header(\"Authorization\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type request header is present\", function () {\r",
											"    pm.request.to.have.header(\"Content-Type\");\r",
											"});\r",
											"\r",
											"var token = pm.response.headers.get(\"Authorization\");\r",
											"if(token != null && token.startsWith(\"Bearer \")) {\r",
											"    token = token.substring(7);\r",
											"}\r",
											"\r",
											"pm.collectionVariables.set(\"token\", token);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "Origin",
										"value": "{{originURL}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<user>\r\n    <login>{{login}}</login>\r\n    <password>updatePassword</password>\r\n</user>",
									"options": {
										"raw": {
											"language": "xml"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/login",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"login"
									]
								}
							},
							"response": []
						},
						{
							"name": "GET all users before delete",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type header is present\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"login\"));\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept": true
								}
							},
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/xml",
										"type": "default"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/users",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 204\", function () {\r",
											"    pm.response.to.have.status(204);\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type header is present\", function () {\r",
											"    pm.request.to.have.header(\"Content-Type\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/xml",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/users/{{login}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										"{{login}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete user not found",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 404\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type header is present\", function () {\r",
											"    pm.request.to.have.header(\"Content-Type\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/xml",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/users/notFound",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										"notFound"
									]
								}
							},
							"response": []
						},
						{
							"name": "GET all users after delete",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type header is present\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"\r",
											"pm.test(\"Body matches string, user deleted.\", function () {\r",
											"    pm.expect(pm.response.text()).to.not.include(pm.collectionVariables.get(\"login\"));\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept": true
								}
							},
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/xml",
										"type": "default"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/users",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		}
	],
	"auth": {
		"type": "bearer",
		"bearer": [
			{
				"key": "token",
				"value": "{{token}}",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "baseUrl",
			"value": "{{vmURL}}",
			"type": "default"
		},
		{
			"key": "originURL",
			"value": "http://localhost:8080",
			"type": "string"
		},
		{
			"key": "localUrl",
			"value": "http://localhost:8080",
			"type": "string"
		},
		{
			"key": "vmURL",
			"value": "https://51.38.178.218:8443/users",
			"type": "string"
		},
		{
			"key": "login",
			"value": "toto"
		},
		{
			"key": "password",
			"value": "toto"
		},
		{
			"key": "species",
			"value": "CHICKEN",
			"type": "string"
		},
		{
			"key": "image",
			"value": "helloWorld",
			"type": "string"
		},
		{
			"key": "token",
			"value": "null",
			"type": "string"
		},
		{
			"key": "userId",
			"value": ""
		},
		{
			"key": "userPassword",
			"value": ""
		},
		{
			"key": "userName",
			"value": ""
		}
	]
}
